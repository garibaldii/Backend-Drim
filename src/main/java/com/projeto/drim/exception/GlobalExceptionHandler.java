package com.projeto.drim.exception;

import com.projeto.drim.dto.ErrorResponse;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;

import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;


import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;

@RestControllerAdvice
//‚ÑπÔ∏è nota√ß√£o diz ao Spring que esta classe √© respons√°vel por
// fornecer tratamento global para exce√ß√µes em todos os controladores REST da aplica√ß√£o.
public class GlobalExceptionHandler {
    // ‚ÑπÔ∏è classe GlobalExceptionHandler √© respons√°vel por lidar com exce√ß√µes (erros)
    // que ocorrem durante a valida√ß√£o dos dados recebidos em uma API.

    @ExceptionHandler(MethodArgumentNotValidException.class)
    // ‚ÑπÔ∏è Esta anota√ß√£o indica que o m√©todo "Lida com erro de valida√ß√£o" deve ser chamado quando ocorrer uma exce√ß√£o do tipo MethodArgumentNotValidException. Essa exce√ß√£o √© lan√ßada quando ocorre uma falha na valida√ß√£o de dados de entrada em m√©todos de controle (controllers) da API.
    public ResponseEntity<?> handleValidationException(MethodArgumentNotValidException ex) {
        Map<String, String> errors = new HashMap<>();

        ex
                .getBindingResult()
                .getAllErrors()
                .forEach((error) -> {

                    String chave = ((FieldError) error).getField();
                    String valor = error.getDefaultMessage();

                    errors.put(chave, valor);

                });
        ErrorResponse response = new ErrorResponse(HttpStatus.BAD_REQUEST.value(),
                "‚ùå Erro de Valida√ß√£o", errors);

        //‚ÑπÔ∏è Cria um objeto ValidationErrorResponse, que √© uma classe personalizada para representar a resposta de erro de
        // valida√ß√£o. Este objeto cont√©m o c√≥digo HTTP 400 (Bad Request), uma mensagem gen√©rica de erro e o mapa de erros detalhados.
        return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
    }








    @ExceptionHandler(NoSuchElementException.class)
    public ResponseEntity<?> handleNoSuchElementException(NoSuchElementException ex) {

        ErrorResponse response = new ErrorResponse(
                HttpStatus.NOT_FOUND.value(),
                "üò¢  Objeto n√£o encontrado no banco de dados ",
                Map.of("mensagem", ex.getMessage())
        );

        return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
    }



    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<?> handleIllegalArgumentException(IllegalArgumentException ex) {

        ErrorResponse response = new ErrorResponse(
                HttpStatus.CONFLICT.value(),
                "üòØ Objeto j√° cadastrado",
                Map.of("mensagem", ex.getMessage())
        );

        return new ResponseEntity<>(response, HttpStatus.CONFLICT);


    }


}
